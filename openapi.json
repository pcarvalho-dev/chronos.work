{
  "openapi": "3.1.0",
  "info": {
    "title": "Chronos.work API",
    "version": "1.0.0",
    "description": "API para gerenciamento de tempo de trabalho com autenticação de usuários e registro de check-in/check-out.",
    "contact": {
      "name": "API Support"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Servidor de desenvolvimento"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Endpoints de autenticação de usuários"
    },
    {
      "name": "Time Tracking",
      "description": "Endpoints de controle de ponto"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Autenticação via JWT Bearer token no header Authorization"
      }
    },
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email do usuário",
            "example": "pablo@email.com"
          },
          "password": {
            "type": "string",
            "description": "Senha do usuário",
            "example": "123456"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email do usuário para recuperação de senha",
            "example": "pablo@email.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "ResetPasswordRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token de recuperação recebido por email",
            "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
          },
          "newPassword": {
            "type": "string",
            "minLength": 6,
            "description": "Nova senha",
            "example": "novaSenha123"
          }
        },
        "required": [
          "token",
          "newPassword"
        ]
      },
      "UpdateProfileRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "description": "Nome completo do usuário",
            "example": "Pablo Silva"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email do usuário (deve ser único)",
            "example": "pablo@email.com"
          },
          "cpf": {
            "type": "string",
            "pattern": "^\\d{11}$",
            "description": "CPF do usuário (11 dígitos)",
            "example": "12345678901"
          },
          "rg": {
            "type": "string",
            "description": "RG do usuário",
            "example": "123456789"
          },
          "birthDate": {
            "type": "string",
            "format": "date",
            "description": "Data de nascimento",
            "example": "1990-05-15"
          },
          "gender": {
            "type": "string",
            "enum": [
              "Masculino",
              "Feminino",
              "Outro",
              "Prefiro não informar"
            ],
            "description": "Gênero do usuário"
          },
          "maritalStatus": {
            "type": "string",
            "enum": [
              "Solteiro(a)",
              "Casado(a)",
              "Divorciado(a)",
              "Viúvo(a)",
              "União Estável"
            ],
            "description": "Estado civil"
          },
          "phone": {
            "type": "string",
            "description": "Telefone fixo",
            "example": "(11) 1234-5678"
          },
          "mobilePhone": {
            "type": "string",
            "description": "Telefone celular",
            "example": "(11) 91234-5678"
          },
          "address": {
            "type": "string",
            "description": "Logradouro",
            "example": "Rua das Flores"
          },
          "addressNumber": {
            "type": "string",
            "description": "Número do endereço",
            "example": "123"
          },
          "addressComplement": {
            "type": "string",
            "description": "Complemento do endereço",
            "example": "Apto 45"
          },
          "neighborhood": {
            "type": "string",
            "description": "Bairro",
            "example": "Centro"
          },
          "city": {
            "type": "string",
            "description": "Cidade",
            "example": "São Paulo"
          },
          "state": {
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "description": "Estado (UF)",
            "example": "SP"
          },
          "zipCode": {
            "type": "string",
            "pattern": "^\\d{8}$",
            "description": "CEP (8 dígitos)",
            "example": "01234567"
          },
          "country": {
            "type": "string",
            "description": "País",
            "example": "Brasil"
          },
          "employeeId": {
            "type": "string",
            "description": "Matrícula do funcionário",
            "example": "EMP001"
          },
          "department": {
            "type": "string",
            "description": "Departamento",
            "example": "TI"
          },
          "position": {
            "type": "string",
            "description": "Cargo",
            "example": "Desenvolvedor Full Stack"
          },
          "hireDate": {
            "type": "string",
            "format": "date",
            "description": "Data de contratação",
            "example": "2024-01-15"
          },
          "salary": {
            "type": "number",
            "exclusiveMinimum": 0,
            "description": "Salário",
            "example": 5000
          },
          "workSchedule": {
            "type": "string",
            "description": "Jornada de trabalho",
            "example": "Segunda a Sexta, 9h às 18h"
          },
          "employmentType": {
            "type": "string",
            "enum": [
              "CLT",
              "PJ",
              "Estagiário",
              "Freelancer",
              "Temporário",
              "Autônomo"
            ],
            "description": "Tipo de contrato"
          },
          "directSupervisor": {
            "type": "string",
            "description": "Supervisor direto",
            "example": "João Santos"
          },
          "bankName": {
            "type": "string",
            "description": "Nome do banco",
            "example": "Banco do Brasil"
          },
          "bankAccount": {
            "type": "string",
            "description": "Número da conta",
            "example": "12345-6"
          },
          "bankAgency": {
            "type": "string",
            "description": "Agência bancária",
            "example": "1234"
          },
          "bankAccountType": {
            "type": "string",
            "enum": [
              "Corrente",
              "Poupança",
              "Salário"
            ],
            "description": "Tipo de conta bancária"
          },
          "pix": {
            "type": "string",
            "description": "Chave PIX",
            "example": "pablo@email.com"
          },
          "emergencyContactName": {
            "type": "string",
            "description": "Nome do contato de emergência",
            "example": "Maria Silva"
          },
          "emergencyContactPhone": {
            "type": "string",
            "description": "Telefone do contato de emergência",
            "example": "(11) 98765-4321"
          },
          "emergencyContactRelationship": {
            "type": "string",
            "description": "Grau de parentesco do contato de emergência",
            "example": "Mãe"
          },
          "education": {
            "type": "string",
            "enum": [
              "Fundamental",
              "Médio",
              "Superior",
              "Pós-graduação",
              "Mestrado",
              "Doutorado"
            ],
            "description": "Nível de escolaridade"
          },
          "notes": {
            "type": "string",
            "description": "Observações adicionais",
            "example": "Funcionário exemplar"
          },
          "isActive": {
            "type": "boolean",
            "description": "Status do usuário",
            "example": true
          }
        }
      },
      "RegisterRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "description": "Nome completo do usuário",
            "example": "Pablo Silva"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email do usuário (deve ser único)",
            "example": "pablo@email.com"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "description": "Senha do usuário",
            "example": "123456"
          },
          "cpf": {
            "type": "string",
            "pattern": "^\\d{11}$",
            "description": "CPF do usuário (11 dígitos)",
            "example": "12345678901"
          },
          "rg": {
            "type": "string",
            "description": "RG do usuário",
            "example": "123456789"
          },
          "birthDate": {
            "type": "string",
            "format": "date",
            "description": "Data de nascimento",
            "example": "1990-05-15"
          },
          "gender": {
            "type": "string",
            "enum": [
              "Masculino",
              "Feminino",
              "Outro",
              "Prefiro não informar"
            ],
            "description": "Gênero do usuário"
          },
          "maritalStatus": {
            "type": "string",
            "enum": [
              "Solteiro(a)",
              "Casado(a)",
              "Divorciado(a)",
              "Viúvo(a)",
              "União Estável"
            ],
            "description": "Estado civil"
          },
          "phone": {
            "type": "string",
            "description": "Telefone fixo",
            "example": "(11) 1234-5678"
          },
          "mobilePhone": {
            "type": "string",
            "description": "Telefone celular",
            "example": "(11) 91234-5678"
          },
          "address": {
            "type": "string",
            "description": "Logradouro",
            "example": "Rua das Flores"
          },
          "addressNumber": {
            "type": "string",
            "description": "Número do endereço",
            "example": "123"
          },
          "addressComplement": {
            "type": "string",
            "description": "Complemento do endereço",
            "example": "Apto 45"
          },
          "neighborhood": {
            "type": "string",
            "description": "Bairro",
            "example": "Centro"
          },
          "city": {
            "type": "string",
            "description": "Cidade",
            "example": "São Paulo"
          },
          "state": {
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "description": "Estado (UF)",
            "example": "SP"
          },
          "zipCode": {
            "type": "string",
            "pattern": "^\\d{8}$",
            "description": "CEP (8 dígitos)",
            "example": "01234567"
          },
          "country": {
            "type": "string",
            "description": "País",
            "example": "Brasil"
          },
          "employeeId": {
            "type": "string",
            "description": "Matrícula do funcionário",
            "example": "EMP001"
          },
          "department": {
            "type": "string",
            "description": "Departamento",
            "example": "TI"
          },
          "position": {
            "type": "string",
            "description": "Cargo",
            "example": "Desenvolvedor Full Stack"
          },
          "hireDate": {
            "type": "string",
            "format": "date",
            "description": "Data de contratação",
            "example": "2024-01-15"
          },
          "salary": {
            "type": "number",
            "exclusiveMinimum": 0,
            "description": "Salário",
            "example": 5000
          },
          "workSchedule": {
            "type": "string",
            "description": "Jornada de trabalho",
            "example": "Segunda a Sexta, 9h às 18h"
          },
          "employmentType": {
            "type": "string",
            "enum": [
              "CLT",
              "PJ",
              "Estagiário",
              "Freelancer",
              "Temporário",
              "Autônomo"
            ],
            "description": "Tipo de contrato"
          },
          "directSupervisor": {
            "type": "string",
            "description": "Supervisor direto",
            "example": "João Santos"
          },
          "bankName": {
            "type": "string",
            "description": "Nome do banco",
            "example": "Banco do Brasil"
          },
          "bankAccount": {
            "type": "string",
            "description": "Número da conta",
            "example": "12345-6"
          },
          "bankAgency": {
            "type": "string",
            "description": "Agência bancária",
            "example": "1234"
          },
          "bankAccountType": {
            "type": "string",
            "enum": [
              "Corrente",
              "Poupança",
              "Salário"
            ],
            "description": "Tipo de conta bancária"
          },
          "pix": {
            "type": "string",
            "description": "Chave PIX",
            "example": "pablo@email.com"
          },
          "emergencyContactName": {
            "type": "string",
            "description": "Nome do contato de emergência",
            "example": "Maria Silva"
          },
          "emergencyContactPhone": {
            "type": "string",
            "description": "Telefone do contato de emergência",
            "example": "(11) 98765-4321"
          },
          "emergencyContactRelationship": {
            "type": "string",
            "description": "Grau de parentesco do contato de emergência",
            "example": "Mãe"
          },
          "education": {
            "type": "string",
            "enum": [
              "Fundamental",
              "Médio",
              "Superior",
              "Pós-graduação",
              "Mestrado",
              "Doutorado"
            ],
            "description": "Nível de escolaridade"
          },
          "notes": {
            "type": "string",
            "description": "Observações adicionais",
            "example": "Funcionário exemplar"
          }
        },
        "required": [
          "name",
          "email",
          "password"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Pablo Silva"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "pablo@email.com"
          },
          "cpf": {
            "type": "string",
            "example": "12345678901"
          },
          "rg": {
            "type": "string",
            "example": "123456789"
          },
          "birthDate": {
            "type": "string",
            "format": "date",
            "example": "1990-05-15"
          },
          "gender": {
            "type": "string",
            "example": "Masculino"
          },
          "maritalStatus": {
            "type": "string",
            "example": "Solteiro(a)"
          },
          "phone": {
            "type": "string",
            "example": "(11) 1234-5678"
          },
          "mobilePhone": {
            "type": "string",
            "example": "(11) 91234-5678"
          },
          "address": {
            "type": "string",
            "example": "Rua das Flores"
          },
          "addressNumber": {
            "type": "string",
            "example": "123"
          },
          "addressComplement": {
            "type": "string",
            "example": "Apto 45"
          },
          "neighborhood": {
            "type": "string",
            "example": "Centro"
          },
          "city": {
            "type": "string",
            "example": "São Paulo"
          },
          "state": {
            "type": "string",
            "example": "SP"
          },
          "zipCode": {
            "type": "string",
            "example": "01234567"
          },
          "country": {
            "type": "string",
            "example": "Brasil"
          },
          "employeeId": {
            "type": "string",
            "example": "EMP001"
          },
          "department": {
            "type": "string",
            "example": "TI"
          },
          "position": {
            "type": "string",
            "example": "Desenvolvedor Full Stack"
          },
          "hireDate": {
            "type": "string",
            "format": "date",
            "example": "2024-01-15"
          },
          "salary": {
            "type": "number",
            "example": 5000
          },
          "workSchedule": {
            "type": "string",
            "example": "Segunda a Sexta, 9h às 18h"
          },
          "employmentType": {
            "type": "string",
            "example": "CLT"
          },
          "directSupervisor": {
            "type": "string",
            "example": "João Santos"
          },
          "bankName": {
            "type": "string",
            "example": "Banco do Brasil"
          },
          "bankAccount": {
            "type": "string",
            "example": "12345-6"
          },
          "bankAgency": {
            "type": "string",
            "example": "1234"
          },
          "bankAccountType": {
            "type": "string",
            "example": "Corrente"
          },
          "pix": {
            "type": "string",
            "example": "pablo@email.com"
          },
          "emergencyContactName": {
            "type": "string",
            "example": "Maria Silva"
          },
          "emergencyContactPhone": {
            "type": "string",
            "example": "(11) 98765-4321"
          },
          "emergencyContactRelationship": {
            "type": "string",
            "example": "Mãe"
          },
          "education": {
            "type": "string",
            "example": "Superior"
          },
          "notes": {
            "type": "string",
            "example": "Funcionário exemplar"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-10-23T12:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-10-23T12:00:00.000Z"
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "isActive",
          "createdAt",
          "updatedAt"
        ]
      },
      "TimeLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "checkIn": {
            "type": "string",
            "format": "date-time",
            "description": "Data e hora de entrada",
            "example": "2025-10-22T20:00:00.000Z"
          },
          "checkOut": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Data e hora de saída (null se ainda não fez checkout)",
            "example": "2025-10-22T23:00:00.000Z"
          },
          "checkInPhoto": {
            "type": [
              "string",
              "null"
            ],
            "description": "URL da foto tirada no momento do check-in",
            "example": "/uploads/checkins/abc123.jpg"
          },
          "checkOutPhoto": {
            "type": [
              "string",
              "null"
            ],
            "description": "URL da foto tirada no momento do check-out",
            "example": "/uploads/checkins/def456.jpg"
          },
          "latitude": {
            "type": [
              "number",
              "null"
            ],
            "description": "Latitude da localização do check-in",
            "example": -23.5505199
          },
          "longitude": {
            "type": [
              "number",
              "null"
            ],
            "description": "Longitude da localização do check-in",
            "example": -46.6333094
          },
          "checkInLocation": {
            "type": [
              "string",
              "null"
            ],
            "description": "Endereço completo do check-in obtido via geocoding reverso",
            "example": "Avenida Paulista, 1578, Bela Vista, São Paulo, Brasil"
          },
          "outLatitude": {
            "type": [
              "number",
              "null"
            ],
            "description": "Latitude da localização do check-out",
            "example": -23.5505199
          },
          "outLongitude": {
            "type": [
              "number",
              "null"
            ],
            "description": "Longitude da localização do check-out",
            "example": -46.6333094
          },
          "checkOutLocation": {
            "type": [
              "string",
              "null"
            ],
            "description": "Endereço completo do check-out obtido via geocoding reverso",
            "example": "Avenida Paulista, 1578, Bela Vista, São Paulo, Brasil"
          },
          "isManual": {
            "type": "boolean",
            "description": "Indica se é um lançamento manual",
            "example": false
          },
          "reason": {
            "type": [
              "string",
              "null"
            ],
            "description": "Motivo do lançamento manual",
            "example": "Esqueci de bater o ponto"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending_approval",
              "approved",
              "rejected"
            ],
            "description": "Status do lançamento: pending_approval (aguardando), approved (aprovado), rejected (rejeitado)",
            "example": "approved"
          },
          "approvalDate": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "Data de aprovação ou rejeição",
            "example": "2025-10-23T10:00:00.000Z"
          },
          "rejectionReason": {
            "type": [
              "string",
              "null"
            ],
            "description": "Motivo da rejeição (se rejeitado)",
            "example": null
          }
        },
        "required": [
          "id",
          "checkIn",
          "checkOut",
          "checkInPhoto",
          "checkOutPhoto",
          "latitude",
          "longitude",
          "checkInLocation",
          "outLatitude",
          "outLongitude",
          "checkOutLocation",
          "isManual",
          "reason",
          "status",
          "approvalDate",
          "rejectionReason"
        ]
      },
      "RefreshTokenRequest": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "Refresh token obtido no login",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "ManualCheckInRequest": {
        "type": "object",
        "properties": {
          "checkIn": {
            "type": "string",
            "format": "date-time",
            "description": "Data e hora de entrada (formato ISO 8601)",
            "example": "2025-10-22T08:00:00.000Z"
          },
          "reason": {
            "type": "string",
            "minLength": 10,
            "description": "Motivo do lançamento manual (mínimo 10 caracteres)",
            "example": "Esqueci de bater o ponto ao chegar no trabalho"
          },
          "checkInLocation": {
            "type": "string",
            "description": "Endereço do check-in (opcional)",
            "example": "Escritório Central"
          },
          "latitude": {
            "type": "number",
            "minimum": -90,
            "maximum": 90,
            "description": "Latitude (opcional)",
            "example": -23.5505199
          },
          "longitude": {
            "type": "number",
            "minimum": -180,
            "maximum": 180,
            "description": "Longitude (opcional)",
            "example": -46.6333094
          }
        },
        "required": [
          "checkIn",
          "reason"
        ]
      },
      "ManualCheckOutRequest": {
        "type": "object",
        "properties": {
          "timeLogId": {
            "type": "integer",
            "description": "ID do registro de ponto",
            "example": 1
          },
          "checkOut": {
            "type": "string",
            "format": "date-time",
            "description": "Data e hora de saída (formato ISO 8601)",
            "example": "2025-10-22T17:00:00.000Z"
          },
          "reason": {
            "type": "string",
            "minLength": 10,
            "description": "Motivo do lançamento manual (mínimo 10 caracteres)",
            "example": "Esqueci de bater o ponto ao sair do trabalho"
          },
          "checkOutLocation": {
            "type": "string",
            "description": "Endereço do check-out (opcional)",
            "example": "Escritório Central"
          },
          "outLatitude": {
            "type": "number",
            "minimum": -90,
            "maximum": 90,
            "description": "Latitude (opcional)",
            "example": -23.5505199
          },
          "outLongitude": {
            "type": "number",
            "minimum": -180,
            "maximum": 180,
            "description": "Longitude (opcional)",
            "example": -46.6333094
          }
        },
        "required": [
          "timeLogId",
          "checkOut",
          "reason"
        ]
      },
      "ApproveTimeLogRequest": {
        "type": "object",
        "properties": {
          "timeLogId": {
            "type": "integer",
            "description": "ID do registro de ponto a ser aprovado",
            "example": 1
          }
        },
        "required": [
          "timeLogId"
        ]
      },
      "RejectTimeLogRequest": {
        "type": "object",
        "properties": {
          "timeLogId": {
            "type": "integer",
            "description": "ID do registro de ponto a ser rejeitado",
            "example": 1
          },
          "rejectionReason": {
            "type": "string",
            "minLength": 10,
            "description": "Motivo da rejeição (mínimo 10 caracteres)",
            "example": "Horário informado não corresponde ao expediente"
          }
        },
        "required": [
          "timeLogId",
          "rejectionReason"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Internal server error"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "path": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "code",
                "message",
                "path"
              ]
            }
          }
        },
        "required": [
          "message"
        ]
      }
    },
    "parameters": {}
  },
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Registrar novo usuário",
        "description": "Cria uma nova conta de usuário no sistema",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Usuário criado com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User created successfully"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "accessToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "description": "Token JWT de acesso (válido por 15 minutos)"
                    },
                    "refreshToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "description": "Token JWT de renovação (válido por 7 dias)"
                    }
                  },
                  "required": [
                    "message",
                    "user",
                    "accessToken",
                    "refreshToken"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Erro de validação ou usuário já existe",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Fazer login",
        "description": "Autentica um usuário e cria uma sessão",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login realizado com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Logged in successfully"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "accessToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "description": "Token JWT de acesso (válido por 15 minutos)"
                    },
                    "refreshToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "description": "Token JWT de renovação (válido por 7 dias)"
                    }
                  },
                  "required": [
                    "message",
                    "user",
                    "accessToken",
                    "refreshToken"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Credenciais inválidas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Não autorizado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Solicitar recuperação de senha",
        "description": "Envia um email com link para redefinir a senha",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email de recuperação enviado (se o email existir)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Se o email existir, um link de recuperação será enviado"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Redefinir senha",
        "description": "Redefine a senha usando o token recebido por email",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Senha redefinida com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Senha redefinida com sucesso"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Token inválido ou expirado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/profile": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Obter perfil do usuário",
        "description": "Retorna os dados do perfil do usuário autenticado, incluindo foto de perfil",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Perfil retornado com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "required": [
                    "user"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Não autenticado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Atualizar perfil do usuário",
        "description": "Atualiza as informações do perfil do usuário autenticado. Todos os campos são opcionais - envie apenas os campos que deseja atualizar.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Perfil atualizado com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Perfil atualizado com sucesso"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "required": [
                    "message",
                    "user"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Email já está em uso ou erro de validação",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Não autenticado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/profile-photo": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Obter foto de perfil do usuário",
        "description": "Retorna a URL da foto de perfil do usuário autenticado",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "URL da foto retornada com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "profilePhoto": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "example": "/uploads/profiles/abc123.jpg",
                      "description": "URL da foto de perfil do usuário"
                    }
                  },
                  "required": [
                    "profilePhoto"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Não autenticado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Foto de perfil não encontrada",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Foto de perfil não encontrada"
                    },
                    "profilePhoto": {
                      "type": "null"
                    }
                  },
                  "required": [
                    "message",
                    "profilePhoto"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh-token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Renovar token de acesso",
        "description": "Gera um novo par de tokens (access e refresh) usando um refresh token válido",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tokens renovados com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "description": "Novo token JWT de acesso"
                    },
                    "refreshToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                      "description": "Novo token JWT de renovação"
                    }
                  },
                  "required": [
                    "accessToken",
                    "refreshToken"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Refresh token não fornecido",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Refresh token inválido ou expirado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Fazer logout",
        "description": "Invalida o refresh token do usuário autenticado",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout realizado com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Logged out successfully"
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Não autenticado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/upload-photo": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Upload de foto de perfil",
        "description": "Faz upload de uma foto de perfil do usuário autenticado. Aceita apenas imagens (JPEG, PNG, GIF) até 5MB.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Arquivo de imagem (JPEG, PNG, GIF)"
                  }
                },
                "required": [
                  "photo"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Foto atualizada com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Foto de perfil atualizada com sucesso"
                    },
                    "profilePhoto": {
                      "type": "string",
                      "example": "/uploads/profiles/abc123.jpg"
                    }
                  },
                  "required": [
                    "message",
                    "profilePhoto"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Nenhum arquivo enviado ou tipo de arquivo inválido",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Não autenticado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/timelog/checkin": {
      "post": {
        "tags": [
          "Time Tracking"
        ],
        "summary": "Registrar entrada",
        "description": "Registra o início do turno de trabalho do usuário autenticado. Requer uma foto e localização (latitude/longitude). O endereço é obtido automaticamente via API de geocoding reverso.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Foto obrigatória do momento do check-in (JPEG, PNG, GIF até 5MB)"
                  },
                  "latitude": {
                    "type": "number",
                    "description": "Latitude da localização (-90 a 90)",
                    "example": -23.5505199
                  },
                  "longitude": {
                    "type": "number",
                    "description": "Longitude da localização (-180 a 180)",
                    "example": -46.6333094
                  }
                },
                "required": [
                  "photo",
                  "latitude",
                  "longitude"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Check-in realizado com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Checked in successfully"
                    },
                    "checkIn": {
                      "$ref": "#/components/schemas/TimeLog"
                    }
                  },
                  "required": [
                    "message",
                    "checkIn"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Foto ou localização não enviada, coordenadas inválidas, usuário já possui check-in ativo, ou tipo de arquivo inválido",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Não autenticado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/timelog/checkout": {
      "post": {
        "tags": [
          "Time Tracking"
        ],
        "summary": "Registrar saída",
        "description": "Registra o fim do turno de trabalho do usuário autenticado. Requer uma foto e localização (latitude/longitude). O endereço é obtido automaticamente via API de geocoding reverso.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Foto obrigatória do momento do check-out (JPEG, PNG, GIF até 5MB)"
                  },
                  "latitude": {
                    "type": "number",
                    "description": "Latitude da localização (-90 a 90)",
                    "example": -23.5505199
                  },
                  "longitude": {
                    "type": "number",
                    "description": "Longitude da localização (-180 a 180)",
                    "example": -46.6333094
                  }
                },
                "required": [
                  "photo",
                  "latitude",
                  "longitude"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Check-out realizado com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Checked out successfully"
                    },
                    "timeLog": {
                      "$ref": "#/components/schemas/TimeLog"
                    }
                  },
                  "required": [
                    "message",
                    "timeLog"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Foto ou localização não enviada, coordenadas inválidas, usuário não possui check-in ativo, ou tipo de arquivo inválido",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Não autenticado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/timelog": {
      "get": {
        "tags": [
          "Time Tracking"
        ],
        "summary": "Listar registros de tempo",
        "description": "Retorna todos os registros de ponto do usuário autenticado, incluindo fotos, coordenadas geográficas e endereços completos de cada check-in e check-out. Ordenados por data de entrada (mais recentes primeiro). Suporta filtros opcionais por data.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Data inicial para filtrar os registros (formato: YYYY-MM-DD). Retorna registros a partir desta data (inclusive).",
              "example": "2025-10-01"
            },
            "required": false,
            "description": "Data inicial para filtrar os registros (formato: YYYY-MM-DD). Retorna registros a partir desta data (inclusive).",
            "name": "startDate",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date",
              "description": "Data final para filtrar os registros (formato: YYYY-MM-DD). Retorna registros até esta data (inclusive).",
              "example": "2025-10-26"
            },
            "required": false,
            "description": "Data final para filtrar os registros (formato: YYYY-MM-DD). Retorna registros até esta data (inclusive).",
            "name": "endDate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de registros retornada com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeLog"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Não autenticado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/timelog/manual-checkin": {
      "post": {
        "tags": [
          "Time Tracking"
        ],
        "summary": "Lançar check-in manualmente (retroativo)",
        "description": "Cria um lançamento manual de check-in retroativo. O registro ficará com status \"pending_approval\" até que um gestor aprove.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualCheckInRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Lançamento manual criado com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Lançamento manual de check-in criado. Aguardando aprovação."
                    },
                    "checkIn": {
                      "$ref": "#/components/schemas/TimeLog"
                    }
                  },
                  "required": [
                    "message",
                    "checkIn"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Erro de validação ou usuário já possui check-in ativo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Não autenticado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/timelog/manual-checkout": {
      "post": {
        "tags": [
          "Time Tracking"
        ],
        "summary": "Lançar check-out manualmente (retroativo)",
        "description": "Adiciona um check-out manual a um registro de ponto existente. O registro ficará com status \"pending_approval\" até que um gestor aprove.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualCheckOutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Check-out manual adicionado com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Lançamento manual de check-out criado. Aguardando aprovação."
                    },
                    "timeLog": {
                      "$ref": "#/components/schemas/TimeLog"
                    }
                  },
                  "required": [
                    "message",
                    "timeLog"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Registro não encontrado, erro de validação, ou registro já possui check-out",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Não autenticado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Registro de ponto não encontrado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/timelog/approve": {
      "post": {
        "tags": [
          "Time Tracking"
        ],
        "summary": "Aprovar lançamento manual (gestor)",
        "description": "Aprova um lançamento manual de ponto. Requer permissões de gestor.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveTimeLogRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Lançamento aprovado com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Lançamento manual aprovado com sucesso"
                    },
                    "timeLog": {
                      "$ref": "#/components/schemas/TimeLog"
                    }
                  },
                  "required": [
                    "message",
                    "timeLog"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Erro de validação, registro não é manual, ou já foi processado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Não autenticado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Registro de ponto não encontrado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/timelog/reject": {
      "post": {
        "tags": [
          "Time Tracking"
        ],
        "summary": "Rejeitar lançamento manual (gestor)",
        "description": "Rejeita um lançamento manual de ponto com um motivo. Requer permissões de gestor.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectTimeLogRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Lançamento rejeitado",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Lançamento manual rejeitado"
                    },
                    "timeLog": {
                      "$ref": "#/components/schemas/TimeLog"
                    }
                  },
                  "required": [
                    "message",
                    "timeLog"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Erro de validação, registro não é manual, ou já foi processado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Não autenticado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Registro de ponto não encontrado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/timelog/pending": {
      "get": {
        "tags": [
          "Time Tracking"
        ],
        "summary": "Listar lançamentos pendentes de aprovação (gestor)",
        "description": "Retorna todos os lançamentos manuais com status pending_approval. Requer permissões de gestor.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de lançamentos pendentes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeLog"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Não autenticado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro interno do servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "webhooks": {}
}